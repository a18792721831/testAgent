# flows.yaml
version: 1.0
name: "测试用例生成工作流"
description: "基于需求文档生成测试用例的详细流程"
rules:
  - "严格遵守需求文档中的所有功能点和规则"
  - "生成的测试用例必须覆盖所有正向和负向场景"
  - "每个测试用例应包含：用例标题、前置条件、测试步骤、预期结果"
  - "优先覆盖核心业务场景，再覆盖边缘场景"
  - "使用 {{parameter}} 语法动态替换变量"

steps:
  - step: 1
    name: "需求分析"
    description: "解析需求文档，识别功能模块"
    action: "分析.md文档"
    output: "功能模块列表"
    rules:
      - "提取文档中的一级和二级标题作为功能模块"
      - "识别每个功能模块的关键操作流程"
      - "标记核心功能和可选功能"

  - step: 2
    name: "用例设计"
    description: "为每个功能模块设计测试场景"
    action: "生成测试场景"
    output: "测试场景大纲"
    rules:
      - "每个功能至少设计3个测试场景（1个正向+2个负向）"
      - "包含边界值测试和异常流程测试"
      - "对关键业务流程设计端到端测试场景"

  - step: 3
    name: "用例生成"
    description: "生成详细测试用例"
    action: "生成测试用例"
    output: "测试用例集合"
    rules:
      - "用例格式：| 模块 | 用例ID | 标题 | 优先级 | 前置条件 | 步骤 | 预期结果 |"
      - "用例ID格式：TC_{模块缩写}_{序号}"
      - "步骤描述使用祈使句：'输入...', '点击...', '验证...'"
      - "预期结果必须可测量"

  - step: 4
    name: "用例优化"
    description: "检查和补充测试用例"
    action: "优化用例"
    output: "优化后的用例集合"
    rules:
      - "检查用例是否覆盖所有需求点"
      - "移除重复用例"
      - "补充缺少的异常场景"
      - "合并相似用例"

  - step: 5
    name: "结果输出"
    description: "导出测试用例文件"
    action: "导出CSV"
    output: "./testcase/TC_{{timestamp}}.csv"
    rules:
      - "CSV文件使用UTF-8编码"
      - "包含表头：模块,用例ID,标题,前置条件,步骤,预期结果"
      - "文件命名包含生成时间戳"